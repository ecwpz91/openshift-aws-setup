---

#############################################################
# Provision AWS Infrastructure
#############################################################
- name: provision bastion infrastructure
  hosts: localhost

  vars_files:
    - vars/aws-config.yml

  roles:
  - define-derived-vars
  - setup-ssh
  - setup-vpc
  - setup-security-groups
  - setup-vms
  - setup-vms-bastion
  - setup-dns
  - setup-dns-bastion
  - setup-ssh-bastion
  - cache-vars

  pre_tasks:
    - name: verify ansible version
      assert:
        that:
          - "ansible_version.major == 2"
          - "ansible_version.minor >= 4"
        msg: "This script is only supported with the 2.4.1 version or later of Ansible"

    - fail: msg="Variables required to register subscriptions are missing, please confirm that either rhsm_username, rhsm_password and rhsm_pool OR rhsm_key_id and rhsm_org_id is defined"
      when: (deployment_type == 'openshift-enterprise') and not (((rhsm_username is defined) and (rhsm_password is defined) and (rhsm_pool is defined)) or ((rhsm_key_id is defined) and (rhsm_org_id is defined)))

  post_tasks:
      - name: insert/update inventory
        blockinfile:
          path: inventory/inventory.cfg
          block: |
            [bastion]
            bastion ansible_ssh_host={{bastion_public_ip}} ansible_user={{amazon_user}}

            [created_vms]
            bastion ansible_ssh_host={{bastion_public_ip}} ansible_user={{amazon_user}}

#############################################################
# Register & Update Virtual Machines
#############################################################
- name: setup virtual machine hosts
  hosts: created_vms
  remote_user: "{{amazon_user}}"

  vars_files:
    - vars/aws-config.yml

  vars:
    state: 'present'

  roles:
  - {role: register-virtual-machines, when: deployment_type == 'openshift-enterprise'}
  - update-virtual-machines
  - openshift-pre-reqs

#############################################################
# Lets Encrypt Certificates
#############################################################
- name: generate ssl certificates
  hosts: bastion
  remote_user: "{{amazon_user}}"

  vars_files:
    - vars/aws-config.yml

  roles:
  - define-derived-vars
  - {role: generate-ssl-certs, when: use_lets_encrypt }

  post_tasks:
   - name: copy master ssl certificates
     copy:
       src: "{{item}}"
       dest: certs/{{public_master_dns}}/{{item | basename}}
     with_items:
       - "{{master_ssl_cert_file}}"
       - "{{master_ssl_key_file}}"
       - "{{master_ssl_ca_file}}"
     when: master_ssl_cert_file is defined

   - name: copy wildcard ssl certificates
     copy:
       src: "{{item}}"
       dest: certs/{{public_subdomain_prefix}}.{{public_dns_zone}}/{{item | basename}}
     with_items:
       - "{{wildcard_ssl_cert_file}}"
       - "{{wildcard_ssl_key_file}}"
       - "{{wildcard_ssl_fullchain_file}}"
     when: wildcard_ssl_cert_file is defined

#############################################################
# Configure Bastion Host System
#############################################################
- name: setup bastion host
  hosts: bastion
  remote_user: "{{amazon_user}}"

  vars_files:
    - vars/aws-config.yml

  roles:
  - define-derived-vars
  - pip-install
  - awscli-install
  - packer-install
  - aws-setup-install

  pre_tasks:
    - name: check vars cache
      stat:
       path: vars/aws-cache.yml
      register: stat_result

    - name: load cached vars
      include_vars: vars/aws-cache.yml
      when: stat_result.stat.exists == true

#[TODO]:
#-Build core AMI with packer
#-Build base AMI using core with packer
#-Setup AWS credentials
#-Run ansible playbook

#############################################################
# Output Environment Information
#############################################################
- name: display openshift information
  hosts: localhost

  vars_files:
    - vars/aws-config.yml

  roles:
  - define-derived-vars

  post_tasks:
   - name: confirmation message
     debug:
      msg:
        - 'The script has completed successfully.'
        - 'OpenShift console: https://{{public_master_dns}}:8443'
